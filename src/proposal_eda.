{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "81da0120",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import matplotlib.cm as cm\n",
    "from statsmodels.stats.weightstats import ztest"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4592cd01",
   "metadata": {},
   "source": [
    "## Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fd85c36d",
   "metadata": {},
   "outputs": [],
   "source": [
    "crashes = pd.read_csv('Maryland_Statewide_Vehicle_Crashes.csv',low_memory=False)\n",
    "vehicles = pd.read_csv('Maryland_Statewide_Vehicle_Crashes_-_Vehicle_Details.csv',low_memory=False)\n",
    "persons = pd.read_csv('Maryland_Statewide_Vehicle_Crashes_-_Person_Details__Anonymized_.csv',low_memory=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d2edd50d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(848804, 56)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crashes.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "db3c8283",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1903316, 48)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "persons.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3d840fb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1583279, 49)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vehicles.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dfb7b9ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['YEAR', 'QUARTER', 'LIGHT_DESC', 'LIGHT_CODE', 'COUNTY_DESC',\n",
       "       'COUNTY_NO', 'MUNI_DESC', 'MUNI_CODE', 'JUNCTION_DESC', 'JUNCTION_CODE',\n",
       "       'COLLISION_TYPE_DESC', 'COLLISION_TYPE_CODE', 'SURF_COND_DESC',\n",
       "       'SURF_COND_CODE', 'LANE_CODE', 'RD_COND_DESC', 'RD_COND_CODE',\n",
       "       'RD_DIV_DESC', 'RD_DIV_CODE', 'FIX_OBJ_DESC', 'FIX_OBJ_CODE',\n",
       "       'REPORT_NO', 'REPORT_TYPE', 'WEATHER_DESC', 'WEATHER_CODE', 'ACC_DATE',\n",
       "       'ACC_TIME', 'LOC_CODE', 'SIGNAL_FLAG_DESC', 'SIGNAL_FLAG',\n",
       "       'C_M_ZONE_FLAG', 'AGENCY_CODE', 'AREA_CODE', 'HARM_EVENT_DESC1',\n",
       "       'HARM_EVENT_CODE1', 'HARM_EVENT_DESC2', 'HARM_EVENT_CODE2', 'RTE_NO',\n",
       "       'ROUTE_TYPE_CODE', 'RTE_SUFFIX', 'LOG_MILE', 'LOGMILE_DIR_FLAG_DESC',\n",
       "       'LOGMILE_DIR_FLAG', 'MAINROAD_NAME', 'DISTANCE', 'FEET_MILES_FLAG_DESC',\n",
       "       'FEET_MILES_FLAG', 'DISTANCE_DIR_FLAG', 'REFERENCE_NO',\n",
       "       'REFERENCE_TYPE_CODE', 'REFERENCE_SUFFIX', 'REFERENCE_ROAD_NAME',\n",
       "       'LATITUDE', 'LONGITUDE', 'LOCATION', 'Counties'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crashes.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "24a3ebb6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['HARM_EVENT_DESC', 'HARM_EVENT_CODE', 'CONTI_DIRECTION_DESC',\n",
       "       'CONTI_DIRECTION_CODE', 'DAMAGE_DESC', 'DAMAGE_CODE', 'MOVEMENT_DESC',\n",
       "       'MOVEMENT_CODE', 'VIN_NO', 'REPORT_NO', 'CV_BODY_TYPE_DESC',\n",
       "       'CV_BODY_TYPE_CODE', 'VEH_YEAR', 'VEH_MAKE', 'VEH_MODEL',\n",
       "       'COMMERCIAL_FLAG_DESC', 'COMMERCIAL_FLAG', 'HZM_NUM',\n",
       "       'TOWED_AWAY_FLAG_DESC', 'TOWED_AWAY_FLAG', 'NUM_AXLES', 'GVW_DESC',\n",
       "       'GVW_CODE', 'GOING_DIRECTION_DESC', 'GOING_DIRECTION_CODE',\n",
       "       'BODY_TYPE_DESC', 'BODY_TYPE_CODE', 'DRIVERLESS_FLAG_DESC',\n",
       "       'DRIVERLESS_FLAG', 'FIRE_FLAG_DESC', 'FIRE_FLAG', 'PARKED_FLAG_DESC',\n",
       "       'PARKED_FLAG', 'SPEED_LIMIT', 'HIT_AND_RUN_FLAG_DESC',\n",
       "       'HIT_AND_RUN_FLAG', 'HAZMAT_SPILL_FLAG_DESC', 'HAZMAT_SPILL_FLAG',\n",
       "       'VEHICLE_ID', 'TOWED_VEHICLE_CONFIG_DESC', 'TOWED_VEHICLE_CONFIG_CODE',\n",
       "       'AREA_DAMAGED_CODE_IMP1', 'AREA_DAMAGED_CODE1', 'AREA_DAMAGED_CODE2',\n",
       "       'AREA_DAMAGED_CODE3', 'AREA_DAMAGED_CODE_MAIN_DESC',\n",
       "       'AREA_DAMAGED_CODE_MAIN', 'YEAR', 'Quarter'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vehicles.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6a0f5885",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['SEX_DESC', 'SEX_CODE', 'CONDITION_DESC', 'CONDITION_CODE',\n",
       "       'INJ_SEVER_DESC', 'INJ_SEVER_CODE', 'REPORT_NO', 'OCC_SEAT_POS_DESC',\n",
       "       'OCC_SEAT_POS_CODE', 'PED_VISIBLE_DESC', 'PED_VISIBLE_CODE',\n",
       "       'PED_OBEY_DESC', 'PED_OBEY_CODE', 'PED_TYPE_DESC', 'PED_TYPE_CODE',\n",
       "       'PED_LOCATION_CODE', 'MOVEMENT_DESC', 'MOVEMENT_CODE',\n",
       "       'PERSON_TYPE_DESC', 'PERSON_TYPE', 'ALCOHOL_TEST_DESC',\n",
       "       'ALCOHOL_TEST_CODE', 'ALCOHOL_TESTTYPE_DESC', 'ALCOHOL_TESTTYPE_CODE',\n",
       "       'DRUG_TEST_DESC', 'DRUG_TEST_CODE', 'DRUG_TESTRESULT_DESC',\n",
       "       'DRUG_TESTRESULT_CODE', 'BAC_CODE', 'FAULT_FLAG_DESC', 'FAULT_FLAG',\n",
       "       'EQUIP_PROB_DESC', 'EQUIP_PROB_CODE', 'SAF_EQUIP_DESC',\n",
       "       'SAF_EQUIP_CODE', 'EJECT_DESC', 'EJECT_CODE', 'DATE_OF_BIRTH',\n",
       "       'PERSON_ID', 'LICENSE_STATE_CODE', 'CLASS', 'CDL_FLAG_DESC', 'CDL_FLAG',\n",
       "       'VEHICLE_ID', 'EMS_UNIT_LABEL', 'AIRBAG_DEPLOYED', 'YEAR', 'Quarter'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "persons.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6697645c",
   "metadata": {},
   "outputs": [],
   "source": [
    "crashes_df=crashes[['ACC_DATE', 'ACC_TIME','WEATHER_DESC','REPORT_NO','COUNTY_DESC','LATITUDE', 'LONGITUDE','SURF_COND_DESC', 'RD_COND_DESC',\n",
    "       'RD_DIV_DESC']]\n",
    "persons_df=persons[['REPORT_NO','SEX_DESC','DATE_OF_BIRTH','INJ_SEVER_DESC', 'PERSON_TYPE_DESC', 'VEHICLE_ID']]\n",
    "vehicles_df=vehicles[['VEH_YEAR', 'VEH_MAKE','SPEED_LIMIT','YEAR','Quarter', 'VEHICLE_ID']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fd40faea",
   "metadata": {},
   "outputs": [],
   "source": [
    "persons_df.drop(persons_df[persons_df['VEHICLE_ID'] == 'Pedestrian'].index, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "510ef5c8",
   "metadata": {},
   "source": [
    "#### Merging the three datasets on the common column 'REPORT_NO'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "86b55edd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VEH_YEAR</th>\n",
       "      <th>VEH_MAKE</th>\n",
       "      <th>SPEED_LIMIT</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>Quarter</th>\n",
       "      <th>VEHICLE_ID</th>\n",
       "      <th>REPORT_NO</th>\n",
       "      <th>SEX_DESC</th>\n",
       "      <th>DATE_OF_BIRTH</th>\n",
       "      <th>INJ_SEVER_DESC</th>\n",
       "      <th>PERSON_TYPE_DESC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>25</td>\n",
       "      <td>2020</td>\n",
       "      <td>Q2</td>\n",
       "      <td>47e2531d-8c69-470c-9198-502a46c7639e</td>\n",
       "      <td>AE5057004X</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Driver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018.0</td>\n",
       "      <td>TOYOTA</td>\n",
       "      <td>55</td>\n",
       "      <td>2020</td>\n",
       "      <td>Q2</td>\n",
       "      <td>0dbd4a00-c7f2-4c34-b543-c2633fe0118f</td>\n",
       "      <td>MSP7221001P</td>\n",
       "      <td>Female</td>\n",
       "      <td>19691001</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Driver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018.0</td>\n",
       "      <td>TOYOTA</td>\n",
       "      <td>55</td>\n",
       "      <td>2020</td>\n",
       "      <td>Q2</td>\n",
       "      <td>0dbd4a00-c7f2-4c34-b543-c2633fe0118f</td>\n",
       "      <td>MSP7221001P</td>\n",
       "      <td>Male</td>\n",
       "      <td>19570320</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Occupant</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019.0</td>\n",
       "      <td>CHEVROLET</td>\n",
       "      <td>30</td>\n",
       "      <td>2020</td>\n",
       "      <td>Q2</td>\n",
       "      <td>f2c0d05c-ff70-4549-9d48-57c182eae6f2</td>\n",
       "      <td>DA37010040</td>\n",
       "      <td>Female</td>\n",
       "      <td>19880910</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Driver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>35</td>\n",
       "      <td>2020</td>\n",
       "      <td>Q2</td>\n",
       "      <td>5a55c4ee-17e9-4eed-bfe9-f5aca18f5b9e</td>\n",
       "      <td>MDTA1791002C</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Driver</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   VEH_YEAR   VEH_MAKE  SPEED_LIMIT  YEAR Quarter  \\\n",
       "0       NaN    UNKNOWN           25  2020      Q2   \n",
       "1    2018.0     TOYOTA           55  2020      Q2   \n",
       "2    2018.0     TOYOTA           55  2020      Q2   \n",
       "3    2019.0  CHEVROLET           30  2020      Q2   \n",
       "4       NaN    UNKNOWN           35  2020      Q2   \n",
       "\n",
       "                             VEHICLE_ID     REPORT_NO SEX_DESC DATE_OF_BIRTH  \\\n",
       "0  47e2531d-8c69-470c-9198-502a46c7639e    AE5057004X      NaN           NaN   \n",
       "1  0dbd4a00-c7f2-4c34-b543-c2633fe0118f   MSP7221001P   Female      19691001   \n",
       "2  0dbd4a00-c7f2-4c34-b543-c2633fe0118f   MSP7221001P     Male      19570320   \n",
       "3  f2c0d05c-ff70-4549-9d48-57c182eae6f2    DA37010040   Female      19880910   \n",
       "4  5a55c4ee-17e9-4eed-bfe9-f5aca18f5b9e  MDTA1791002C      NaN           NaN   \n",
       "\n",
       "  INJ_SEVER_DESC PERSON_TYPE_DESC  \n",
       "0      No Injury           Driver  \n",
       "1      No Injury           Driver  \n",
       "2      No Injury         Occupant  \n",
       "3      No Injury           Driver  \n",
       "4      No Injury           Driver  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.merge(vehicles_df,persons_df,on = 'VEHICLE_ID')\n",
    "data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "81790151",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VEH_YEAR</th>\n",
       "      <th>VEH_MAKE</th>\n",
       "      <th>SPEED_LIMIT</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>Quarter</th>\n",
       "      <th>VEHICLE_ID</th>\n",
       "      <th>REPORT_NO</th>\n",
       "      <th>SEX_DESC</th>\n",
       "      <th>DATE_OF_BIRTH</th>\n",
       "      <th>INJ_SEVER_DESC</th>\n",
       "      <th>PERSON_TYPE_DESC</th>\n",
       "      <th>ACC_DATE</th>\n",
       "      <th>ACC_TIME</th>\n",
       "      <th>WEATHER_DESC</th>\n",
       "      <th>COUNTY_DESC</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>SURF_COND_DESC</th>\n",
       "      <th>RD_COND_DESC</th>\n",
       "      <th>RD_DIV_DESC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1869189</th>\n",
       "      <td>2019.0</td>\n",
       "      <td>DODG</td>\n",
       "      <td>35</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>73b3f151-5da6-41ad-9cde-84c9cc973c00</td>\n",
       "      <td>DA4173006N</td>\n",
       "      <td>Male</td>\n",
       "      <td>19901211</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Driver</td>\n",
       "      <td>20220828</td>\n",
       "      <td>02:35:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Prince George's</td>\n",
       "      <td>38.678990</td>\n",
       "      <td>-76.810930</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Not Divided</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869190</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>RANGE ROVER</td>\n",
       "      <td>15</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>aa40f312-6cc6-4b98-b417-abfd10790c75</td>\n",
       "      <td>DA41880087</td>\n",
       "      <td>Male</td>\n",
       "      <td>19770220</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Driver</td>\n",
       "      <td>20220724</td>\n",
       "      <td>17:42:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Prince George's</td>\n",
       "      <td>38.894140</td>\n",
       "      <td>-76.784757</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Not Divided</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869191</th>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>25</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>e4f29901-5c50-477a-a33d-38360f657b6e</td>\n",
       "      <td>AC23590059</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Driver</td>\n",
       "      <td>20220913</td>\n",
       "      <td>21:43:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Anne Arundel</td>\n",
       "      <td>39.219000</td>\n",
       "      <td>-76.665000</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Not Divided</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869192</th>\n",
       "      <td>2015.0</td>\n",
       "      <td>TOYT</td>\n",
       "      <td>30</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>f8d235fd-94db-4222-91eb-f8ab19cb96a2</td>\n",
       "      <td>DD5607003W</td>\n",
       "      <td>Male</td>\n",
       "      <td>19830712</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Driver</td>\n",
       "      <td>20220707</td>\n",
       "      <td>04:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Montgomery</td>\n",
       "      <td>39.114891</td>\n",
       "      <td>-77.178566</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Positive Median Barrier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869193</th>\n",
       "      <td>2012.0</td>\n",
       "      <td>HONDA</td>\n",
       "      <td>65</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>9056e42e-496a-4e37-a5de-a05d35122aa0</td>\n",
       "      <td>MSP707500BM</td>\n",
       "      <td>Female</td>\n",
       "      <td>20050518</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Driver</td>\n",
       "      <td>20220912</td>\n",
       "      <td>19:29:00</td>\n",
       "      <td>Raining</td>\n",
       "      <td>Anne Arundel</td>\n",
       "      <td>39.088070</td>\n",
       "      <td>-76.624715</td>\n",
       "      <td>Wet</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Positive Median Barrier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869194</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>CHEV</td>\n",
       "      <td>70</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>8b336008-a89b-48d9-8946-c78867da184f</td>\n",
       "      <td>MSP6241009T</td>\n",
       "      <td>Female</td>\n",
       "      <td>20010424</td>\n",
       "      <td>Possible Incapacitating Injury</td>\n",
       "      <td>Driver</td>\n",
       "      <td>20220924</td>\n",
       "      <td>05:01:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Garrett</td>\n",
       "      <td>39.656153</td>\n",
       "      <td>-79.447349</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Positive Median Barrier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869195</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>CHEV</td>\n",
       "      <td>70</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>8b336008-a89b-48d9-8946-c78867da184f</td>\n",
       "      <td>MSP6241009T</td>\n",
       "      <td>Male</td>\n",
       "      <td>20010806</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Occupant</td>\n",
       "      <td>20220924</td>\n",
       "      <td>05:01:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Garrett</td>\n",
       "      <td>39.656153</td>\n",
       "      <td>-79.447349</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Positive Median Barrier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869196</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>CHEV</td>\n",
       "      <td>70</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>8b336008-a89b-48d9-8946-c78867da184f</td>\n",
       "      <td>MSP6241009T</td>\n",
       "      <td>Female</td>\n",
       "      <td>20030314</td>\n",
       "      <td>Possible Incapacitating Injury</td>\n",
       "      <td>Occupant</td>\n",
       "      <td>20220924</td>\n",
       "      <td>05:01:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Garrett</td>\n",
       "      <td>39.656153</td>\n",
       "      <td>-79.447349</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Positive Median Barrier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869197</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>CHEV</td>\n",
       "      <td>70</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>8b336008-a89b-48d9-8946-c78867da184f</td>\n",
       "      <td>MSP6241009T</td>\n",
       "      <td>Male</td>\n",
       "      <td>20000923</td>\n",
       "      <td>Possible Incapacitating Injury</td>\n",
       "      <td>Occupant</td>\n",
       "      <td>20220924</td>\n",
       "      <td>05:01:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Garrett</td>\n",
       "      <td>39.656153</td>\n",
       "      <td>-79.447349</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Positive Median Barrier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869198</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>CHEV</td>\n",
       "      <td>70</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>8b336008-a89b-48d9-8946-c78867da184f</td>\n",
       "      <td>MSP6241009T</td>\n",
       "      <td>Male</td>\n",
       "      <td>19960427</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Occupant</td>\n",
       "      <td>20220924</td>\n",
       "      <td>05:01:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Garrett</td>\n",
       "      <td>39.656153</td>\n",
       "      <td>-79.447349</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Positive Median Barrier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869199</th>\n",
       "      <td>2014.0</td>\n",
       "      <td>CHEV</td>\n",
       "      <td>70</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>8b336008-a89b-48d9-8946-c78867da184f</td>\n",
       "      <td>MSP6241009T</td>\n",
       "      <td>Female</td>\n",
       "      <td>20010809</td>\n",
       "      <td>Incapacitating/Disabled Injury</td>\n",
       "      <td>Occupant</td>\n",
       "      <td>20220924</td>\n",
       "      <td>05:01:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Garrett</td>\n",
       "      <td>39.656153</td>\n",
       "      <td>-79.447349</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Positive Median Barrier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869200</th>\n",
       "      <td>2009.0</td>\n",
       "      <td>TOYOTA</td>\n",
       "      <td>25</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>b42c94b7-4d82-40b2-9227-78b87151e468</td>\n",
       "      <td>MCP32950025</td>\n",
       "      <td>Female</td>\n",
       "      <td>19510824</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Driver</td>\n",
       "      <td>20220912</td>\n",
       "      <td>17:21:00</td>\n",
       "      <td>Raining</td>\n",
       "      <td>Montgomery</td>\n",
       "      <td>38.993478</td>\n",
       "      <td>-76.992975</td>\n",
       "      <td>Wet</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Unprotected (painted &gt;4 feet...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869201</th>\n",
       "      <td>2016.0</td>\n",
       "      <td>RAM</td>\n",
       "      <td>55</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>b31b679a-ee8a-4f03-8637-7c9c93d95a99</td>\n",
       "      <td>MSP675500XR</td>\n",
       "      <td>Male</td>\n",
       "      <td>19810928</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Driver</td>\n",
       "      <td>20220718</td>\n",
       "      <td>20:44:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Montgomery</td>\n",
       "      <td>39.079790</td>\n",
       "      <td>-77.170596</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Positive Median Barrier</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869202</th>\n",
       "      <td>2018.0</td>\n",
       "      <td>HONDA</td>\n",
       "      <td>25</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>042d152d-d150-4fde-98d4-f459fcd7f84a</td>\n",
       "      <td>DA40660055</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Driver</td>\n",
       "      <td>20220816</td>\n",
       "      <td>05:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Prince George's</td>\n",
       "      <td>38.945956</td>\n",
       "      <td>-76.902768</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Not Divided</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1869203</th>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>25</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q3</td>\n",
       "      <td>5b02146b-a831-42f3-a44b-b0e7185ec462</td>\n",
       "      <td>MCP32950021</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>Driver</td>\n",
       "      <td>20220903</td>\n",
       "      <td>20:48:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Montgomery</td>\n",
       "      <td>39.021518</td>\n",
       "      <td>-77.011905</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Unprotected (painted &gt;4 feet...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         VEH_YEAR     VEH_MAKE  SPEED_LIMIT  YEAR Quarter  \\\n",
       "1869189    2019.0         DODG           35  2022      Q3   \n",
       "1869190    2014.0  RANGE ROVER           15  2022      Q3   \n",
       "1869191       NaN      UNKNOWN           25  2022      Q3   \n",
       "1869192    2015.0         TOYT           30  2022      Q3   \n",
       "1869193    2012.0        HONDA           65  2022      Q3   \n",
       "1869194    2014.0         CHEV           70  2022      Q3   \n",
       "1869195    2014.0         CHEV           70  2022      Q3   \n",
       "1869196    2014.0         CHEV           70  2022      Q3   \n",
       "1869197    2014.0         CHEV           70  2022      Q3   \n",
       "1869198    2014.0         CHEV           70  2022      Q3   \n",
       "1869199    2014.0         CHEV           70  2022      Q3   \n",
       "1869200    2009.0       TOYOTA           25  2022      Q3   \n",
       "1869201    2016.0          RAM           55  2022      Q3   \n",
       "1869202    2018.0        HONDA           25  2022      Q3   \n",
       "1869203       NaN      UNKNOWN           25  2022      Q3   \n",
       "\n",
       "                                   VEHICLE_ID    REPORT_NO SEX_DESC  \\\n",
       "1869189  73b3f151-5da6-41ad-9cde-84c9cc973c00   DA4173006N     Male   \n",
       "1869190  aa40f312-6cc6-4b98-b417-abfd10790c75   DA41880087     Male   \n",
       "1869191  e4f29901-5c50-477a-a33d-38360f657b6e   AC23590059      NaN   \n",
       "1869192  f8d235fd-94db-4222-91eb-f8ab19cb96a2   DD5607003W     Male   \n",
       "1869193  9056e42e-496a-4e37-a5de-a05d35122aa0  MSP707500BM   Female   \n",
       "1869194  8b336008-a89b-48d9-8946-c78867da184f  MSP6241009T   Female   \n",
       "1869195  8b336008-a89b-48d9-8946-c78867da184f  MSP6241009T     Male   \n",
       "1869196  8b336008-a89b-48d9-8946-c78867da184f  MSP6241009T   Female   \n",
       "1869197  8b336008-a89b-48d9-8946-c78867da184f  MSP6241009T     Male   \n",
       "1869198  8b336008-a89b-48d9-8946-c78867da184f  MSP6241009T     Male   \n",
       "1869199  8b336008-a89b-48d9-8946-c78867da184f  MSP6241009T   Female   \n",
       "1869200  b42c94b7-4d82-40b2-9227-78b87151e468  MCP32950025   Female   \n",
       "1869201  b31b679a-ee8a-4f03-8637-7c9c93d95a99  MSP675500XR     Male   \n",
       "1869202  042d152d-d150-4fde-98d4-f459fcd7f84a   DA40660055      NaN   \n",
       "1869203  5b02146b-a831-42f3-a44b-b0e7185ec462  MCP32950021      NaN   \n",
       "\n",
       "        DATE_OF_BIRTH                  INJ_SEVER_DESC PERSON_TYPE_DESC  \\\n",
       "1869189      19901211                       No Injury           Driver   \n",
       "1869190      19770220                       No Injury           Driver   \n",
       "1869191           NaN                       No Injury           Driver   \n",
       "1869192      19830712                       No Injury           Driver   \n",
       "1869193      20050518                       No Injury           Driver   \n",
       "1869194      20010424  Possible Incapacitating Injury           Driver   \n",
       "1869195      20010806                       No Injury         Occupant   \n",
       "1869196      20030314  Possible Incapacitating Injury         Occupant   \n",
       "1869197      20000923  Possible Incapacitating Injury         Occupant   \n",
       "1869198      19960427                       No Injury         Occupant   \n",
       "1869199      20010809  Incapacitating/Disabled Injury         Occupant   \n",
       "1869200      19510824                       No Injury           Driver   \n",
       "1869201      19810928                       No Injury           Driver   \n",
       "1869202           NaN                       No Injury           Driver   \n",
       "1869203           NaN                       No Injury           Driver   \n",
       "\n",
       "         ACC_DATE  ACC_TIME WEATHER_DESC      COUNTY_DESC   LATITUDE  \\\n",
       "1869189  20220828  02:35:00          NaN  Prince George's  38.678990   \n",
       "1869190  20220724  17:42:00          NaN  Prince George's  38.894140   \n",
       "1869191  20220913  21:43:00          NaN     Anne Arundel  39.219000   \n",
       "1869192  20220707  04:00:00          NaN       Montgomery  39.114891   \n",
       "1869193  20220912  19:29:00      Raining     Anne Arundel  39.088070   \n",
       "1869194  20220924  05:01:00          NaN          Garrett  39.656153   \n",
       "1869195  20220924  05:01:00          NaN          Garrett  39.656153   \n",
       "1869196  20220924  05:01:00          NaN          Garrett  39.656153   \n",
       "1869197  20220924  05:01:00          NaN          Garrett  39.656153   \n",
       "1869198  20220924  05:01:00          NaN          Garrett  39.656153   \n",
       "1869199  20220924  05:01:00          NaN          Garrett  39.656153   \n",
       "1869200  20220912  17:21:00      Raining       Montgomery  38.993478   \n",
       "1869201  20220718  20:44:00          NaN       Montgomery  39.079790   \n",
       "1869202  20220816  05:00:00          NaN  Prince George's  38.945956   \n",
       "1869203  20220903  20:48:00          NaN       Montgomery  39.021518   \n",
       "\n",
       "         LONGITUDE SURF_COND_DESC RD_COND_DESC  \\\n",
       "1869189 -76.810930            Dry   No Defects   \n",
       "1869190 -76.784757            Dry   No Defects   \n",
       "1869191 -76.665000            Dry   No Defects   \n",
       "1869192 -77.178566            Dry   No Defects   \n",
       "1869193 -76.624715            Wet   No Defects   \n",
       "1869194 -79.447349            Dry   No Defects   \n",
       "1869195 -79.447349            Dry   No Defects   \n",
       "1869196 -79.447349            Dry   No Defects   \n",
       "1869197 -79.447349            Dry   No Defects   \n",
       "1869198 -79.447349            Dry   No Defects   \n",
       "1869199 -79.447349            Dry   No Defects   \n",
       "1869200 -76.992975            Wet   No Defects   \n",
       "1869201 -77.170596            Dry   No Defects   \n",
       "1869202 -76.902768            Dry   No Defects   \n",
       "1869203 -77.011905            Dry   No Defects   \n",
       "\n",
       "                                               RD_DIV_DESC  \n",
       "1869189                               Two-way, Not Divided  \n",
       "1869190                               Two-way, Not Divided  \n",
       "1869191                               Two-way, Not Divided  \n",
       "1869192          Two-way, Divided, Positive Median Barrier  \n",
       "1869193          Two-way, Divided, Positive Median Barrier  \n",
       "1869194          Two-way, Divided, Positive Median Barrier  \n",
       "1869195          Two-way, Divided, Positive Median Barrier  \n",
       "1869196          Two-way, Divided, Positive Median Barrier  \n",
       "1869197          Two-way, Divided, Positive Median Barrier  \n",
       "1869198          Two-way, Divided, Positive Median Barrier  \n",
       "1869199          Two-way, Divided, Positive Median Barrier  \n",
       "1869200  Two-way, Divided, Unprotected (painted >4 feet...  \n",
       "1869201          Two-way, Divided, Positive Median Barrier  \n",
       "1869202                               Two-way, Not Divided  \n",
       "1869203  Two-way, Divided, Unprotected (painted >4 feet...  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data = pd.merge(data,crashes_df,on = 'REPORT_NO')\n",
    "final_data.tail(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3f19eaa6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Driver', 'Occupant'], dtype=object)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data.PERSON_TYPE_DESC.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2135064e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['No Injury', 'Non-incapacitating Injury',\n",
       "       'Possible Incapacitating Injury', 'Incapacitating/Disabled Injury',\n",
       "       'Fatal Injury'], dtype=object)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data.INJ_SEVER_DESC.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2dff2eec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['VEH_YEAR', 'VEH_MAKE', 'SPEED_LIMIT', 'YEAR', 'Quarter', 'VEHICLE_ID',\n",
       "       'REPORT_NO', 'SEX_DESC', 'DATE_OF_BIRTH', 'INJ_SEVER_DESC',\n",
       "       'PERSON_TYPE_DESC', 'ACC_DATE', 'ACC_TIME', 'WEATHER_DESC',\n",
       "       'COUNTY_DESC', 'LATITUDE', 'LONGITUDE', 'SURF_COND_DESC',\n",
       "       'RD_COND_DESC', 'RD_DIV_DESC'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "48605cb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VEH_YEAR            float64\n",
       "VEH_MAKE             object\n",
       "SPEED_LIMIT           int64\n",
       "YEAR                  int64\n",
       "Quarter              object\n",
       "VEHICLE_ID           object\n",
       "REPORT_NO            object\n",
       "SEX_DESC             object\n",
       "DATE_OF_BIRTH        object\n",
       "INJ_SEVER_DESC       object\n",
       "PERSON_TYPE_DESC     object\n",
       "ACC_DATE              int64\n",
       "ACC_TIME             object\n",
       "WEATHER_DESC         object\n",
       "COUNTY_DESC          object\n",
       "LATITUDE            float64\n",
       "LONGITUDE           float64\n",
       "SURF_COND_DESC       object\n",
       "RD_COND_DESC         object\n",
       "RD_DIV_DESC          object\n",
       "dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e17c4796",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VEH_YEAR</th>\n",
       "      <th>SPEED_LIMIT</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>ACC_DATE</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>LONGITUDE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.790532e+06</td>\n",
       "      <td>1.869204e+06</td>\n",
       "      <td>1.869204e+06</td>\n",
       "      <td>1.869204e+06</td>\n",
       "      <td>1.869204e+06</td>\n",
       "      <td>1.869204e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.996009e+03</td>\n",
       "      <td>3.545643e+01</td>\n",
       "      <td>2.018299e+03</td>\n",
       "      <td>2.018366e+07</td>\n",
       "      <td>3.913817e+01</td>\n",
       "      <td>-7.674101e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.504399e+02</td>\n",
       "      <td>1.503974e+01</td>\n",
       "      <td>2.204545e+00</td>\n",
       "      <td>2.202200e+04</td>\n",
       "      <td>3.103535e-01</td>\n",
       "      <td>4.608677e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>2.015000e+03</td>\n",
       "      <td>2.015010e+07</td>\n",
       "      <td>3.700000e+01</td>\n",
       "      <td>-7.999610e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.005000e+03</td>\n",
       "      <td>2.500000e+01</td>\n",
       "      <td>2.016000e+03</td>\n",
       "      <td>2.016113e+07</td>\n",
       "      <td>3.897694e+01</td>\n",
       "      <td>-7.693850e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.011000e+03</td>\n",
       "      <td>3.500000e+01</td>\n",
       "      <td>2.018000e+03</td>\n",
       "      <td>2.018093e+07</td>\n",
       "      <td>3.920931e+01</td>\n",
       "      <td>-7.671311e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.015000e+03</td>\n",
       "      <td>4.500000e+01</td>\n",
       "      <td>2.020000e+03</td>\n",
       "      <td>2.020091e+07</td>\n",
       "      <td>3.934099e+01</td>\n",
       "      <td>-7.657757e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.999000e+03</td>\n",
       "      <td>7.500000e+01</td>\n",
       "      <td>2.022000e+03</td>\n",
       "      <td>2.022093e+07</td>\n",
       "      <td>3.999480e+01</td>\n",
       "      <td>-7.500000e+01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           VEH_YEAR   SPEED_LIMIT          YEAR      ACC_DATE      LATITUDE  \\\n",
       "count  1.790532e+06  1.869204e+06  1.869204e+06  1.869204e+06  1.869204e+06   \n",
       "mean   1.996009e+03  3.545643e+01  2.018299e+03  2.018366e+07  3.913817e+01   \n",
       "std    2.504399e+02  1.503974e+01  2.204545e+00  2.202200e+04  3.103535e-01   \n",
       "min    0.000000e+00  0.000000e+00  2.015000e+03  2.015010e+07  3.700000e+01   \n",
       "25%    2.005000e+03  2.500000e+01  2.016000e+03  2.016113e+07  3.897694e+01   \n",
       "50%    2.011000e+03  3.500000e+01  2.018000e+03  2.018093e+07  3.920931e+01   \n",
       "75%    2.015000e+03  4.500000e+01  2.020000e+03  2.020091e+07  3.934099e+01   \n",
       "max    9.999000e+03  7.500000e+01  2.022000e+03  2.022093e+07  3.999480e+01   \n",
       "\n",
       "          LONGITUDE  \n",
       "count  1.869204e+06  \n",
       "mean  -7.674101e+01  \n",
       "std    4.608677e-01  \n",
       "min   -7.999610e+01  \n",
       "25%   -7.693850e+01  \n",
       "50%   -7.671311e+01  \n",
       "75%   -7.657757e+01  \n",
       "max   -7.500000e+01  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "20f0bf38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MCP32950021      1\n",
       "EE01110049       1\n",
       "ZL1183001H       1\n",
       "ZH06540020       1\n",
       "ADG6310007       1\n",
       "              ... \n",
       "MSP5297004S     84\n",
       "CB5959002H      85\n",
       "MSP5370008H     86\n",
       "DA40610003      91\n",
       "ZR0151003J     105\n",
       "Name: REPORT_NO, Length: 837359, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data['REPORT_NO'].value_counts().sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7be1fdab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "final_data.hist(figsize=(20,20))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d9366f3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data['DATE_OF_BIRTH']=pd.to_datetime(final_data['DATE_OF_BIRTH'], errors='coerce')\n",
    "final_data['DOB_YEAR'] = final_data['DATE_OF_BIRTH'].dt.year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1f5fac6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculating the age of a person and storing it in a new variable (column)\n",
    "final_data['AGE']=2023-final_data['DOB_YEAR']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "33b8a036",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Storing accident date into correct format\n",
    "final_data['accident_date']=pd.to_datetime(final_data['ACC_DATE'],format='%Y%m%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "0da77d9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Storing accident date time into correct format\n",
    "final_data['accident_datetime']=pd.to_datetime(final_data['accident_date'].astype(str)+' '+final_data['ACC_TIME'].astype(str))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9803ddde",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VEH_YEAR</th>\n",
       "      <th>VEH_MAKE</th>\n",
       "      <th>SPEED_LIMIT</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>Quarter</th>\n",
       "      <th>VEHICLE_ID</th>\n",
       "      <th>REPORT_NO</th>\n",
       "      <th>SEX_DESC</th>\n",
       "      <th>DATE_OF_BIRTH</th>\n",
       "      <th>INJ_SEVER_DESC</th>\n",
       "      <th>...</th>\n",
       "      <th>COUNTY_DESC</th>\n",
       "      <th>LATITUDE</th>\n",
       "      <th>LONGITUDE</th>\n",
       "      <th>SURF_COND_DESC</th>\n",
       "      <th>RD_COND_DESC</th>\n",
       "      <th>RD_DIV_DESC</th>\n",
       "      <th>DOB_YEAR</th>\n",
       "      <th>AGE</th>\n",
       "      <th>accident_date</th>\n",
       "      <th>accident_datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>25</td>\n",
       "      <td>2020</td>\n",
       "      <td>Q2</td>\n",
       "      <td>47e2531d-8c69-470c-9198-502a46c7639e</td>\n",
       "      <td>AE5057004X</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaT</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>...</td>\n",
       "      <td>Baltimore</td>\n",
       "      <td>39.245577</td>\n",
       "      <td>-76.702305</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Not Divided</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2020-05-28</td>\n",
       "      <td>2020-05-28 11:40:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018.0</td>\n",
       "      <td>TOYOTA</td>\n",
       "      <td>55</td>\n",
       "      <td>2020</td>\n",
       "      <td>Q2</td>\n",
       "      <td>0dbd4a00-c7f2-4c34-b543-c2633fe0118f</td>\n",
       "      <td>MSP7221001P</td>\n",
       "      <td>Female</td>\n",
       "      <td>1969-10-01</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>...</td>\n",
       "      <td>Prince George's</td>\n",
       "      <td>38.989139</td>\n",
       "      <td>-76.883444</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Positive Median Barrier</td>\n",
       "      <td>1969.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>2020-06-05</td>\n",
       "      <td>2020-06-05 12:22:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018.0</td>\n",
       "      <td>TOYOTA</td>\n",
       "      <td>55</td>\n",
       "      <td>2020</td>\n",
       "      <td>Q2</td>\n",
       "      <td>0dbd4a00-c7f2-4c34-b543-c2633fe0118f</td>\n",
       "      <td>MSP7221001P</td>\n",
       "      <td>Male</td>\n",
       "      <td>1957-03-20</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>...</td>\n",
       "      <td>Prince George's</td>\n",
       "      <td>38.989139</td>\n",
       "      <td>-76.883444</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Positive Median Barrier</td>\n",
       "      <td>1957.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>2020-06-05</td>\n",
       "      <td>2020-06-05 12:22:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017.0</td>\n",
       "      <td>TOYOTA</td>\n",
       "      <td>55</td>\n",
       "      <td>2020</td>\n",
       "      <td>Q2</td>\n",
       "      <td>8aef1463-c627-4983-86b9-a03da367e602</td>\n",
       "      <td>MSP7221001P</td>\n",
       "      <td>Female</td>\n",
       "      <td>1965-10-05</td>\n",
       "      <td>No Injury</td>\n",
       "      <td>...</td>\n",
       "      <td>Prince George's</td>\n",
       "      <td>38.989139</td>\n",
       "      <td>-76.883444</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Positive Median Barrier</td>\n",
       "      <td>1965.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>2020-06-05</td>\n",
       "      <td>2020-06-05 12:22:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020.0</td>\n",
       "      <td>TOYOTA</td>\n",
       "      <td>55</td>\n",
       "      <td>2020</td>\n",
       "      <td>Q2</td>\n",
       "      <td>402b0d1a-99c4-46b8-bfc7-0e3b90fce6f8</td>\n",
       "      <td>MSP7221001P</td>\n",
       "      <td>Male</td>\n",
       "      <td>1986-07-15</td>\n",
       "      <td>Non-incapacitating Injury</td>\n",
       "      <td>...</td>\n",
       "      <td>Prince George's</td>\n",
       "      <td>38.989139</td>\n",
       "      <td>-76.883444</td>\n",
       "      <td>Dry</td>\n",
       "      <td>No Defects</td>\n",
       "      <td>Two-way, Divided, Positive Median Barrier</td>\n",
       "      <td>1986.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>2020-06-05</td>\n",
       "      <td>2020-06-05 12:22:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   VEH_YEAR VEH_MAKE  SPEED_LIMIT  YEAR Quarter  \\\n",
       "0       NaN  UNKNOWN           25  2020      Q2   \n",
       "1    2018.0   TOYOTA           55  2020      Q2   \n",
       "2    2018.0   TOYOTA           55  2020      Q2   \n",
       "3    2017.0   TOYOTA           55  2020      Q2   \n",
       "4    2020.0   TOYOTA           55  2020      Q2   \n",
       "\n",
       "                             VEHICLE_ID    REPORT_NO SEX_DESC DATE_OF_BIRTH  \\\n",
       "0  47e2531d-8c69-470c-9198-502a46c7639e   AE5057004X      NaN           NaT   \n",
       "1  0dbd4a00-c7f2-4c34-b543-c2633fe0118f  MSP7221001P   Female    1969-10-01   \n",
       "2  0dbd4a00-c7f2-4c34-b543-c2633fe0118f  MSP7221001P     Male    1957-03-20   \n",
       "3  8aef1463-c627-4983-86b9-a03da367e602  MSP7221001P   Female    1965-10-05   \n",
       "4  402b0d1a-99c4-46b8-bfc7-0e3b90fce6f8  MSP7221001P     Male    1986-07-15   \n",
       "\n",
       "              INJ_SEVER_DESC  ...      COUNTY_DESC   LATITUDE  LONGITUDE  \\\n",
       "0                  No Injury  ...        Baltimore  39.245577 -76.702305   \n",
       "1                  No Injury  ...  Prince George's  38.989139 -76.883444   \n",
       "2                  No Injury  ...  Prince George's  38.989139 -76.883444   \n",
       "3                  No Injury  ...  Prince George's  38.989139 -76.883444   \n",
       "4  Non-incapacitating Injury  ...  Prince George's  38.989139 -76.883444   \n",
       "\n",
       "  SURF_COND_DESC RD_COND_DESC                                RD_DIV_DESC  \\\n",
       "0            Dry   No Defects                       Two-way, Not Divided   \n",
       "1            Dry   No Defects  Two-way, Divided, Positive Median Barrier   \n",
       "2            Dry   No Defects  Two-way, Divided, Positive Median Barrier   \n",
       "3            Dry   No Defects  Two-way, Divided, Positive Median Barrier   \n",
       "4            Dry   No Defects  Two-way, Divided, Positive Median Barrier   \n",
       "\n",
       "   DOB_YEAR   AGE accident_date   accident_datetime  \n",
       "0       NaN   NaN    2020-05-28 2020-05-28 11:40:00  \n",
       "1    1969.0  54.0    2020-06-05 2020-06-05 12:22:00  \n",
       "2    1957.0  66.0    2020-06-05 2020-06-05 12:22:00  \n",
       "3    1965.0  58.0    2020-06-05 2020-06-05 12:22:00  \n",
       "4    1986.0  37.0    2020-06-05 2020-06-05 12:22:00  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "86f070bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VEH_YEAR              78672\n",
       "VEH_MAKE                243\n",
       "SPEED_LIMIT               0\n",
       "YEAR                      0\n",
       "Quarter                   0\n",
       "VEHICLE_ID                0\n",
       "REPORT_NO                 0\n",
       "SEX_DESC             146694\n",
       "DATE_OF_BIRTH        149995\n",
       "INJ_SEVER_DESC            0\n",
       "PERSON_TYPE_DESC          0\n",
       "ACC_DATE                  0\n",
       "ACC_TIME                  0\n",
       "WEATHER_DESC         901335\n",
       "COUNTY_DESC              21\n",
       "LATITUDE                  0\n",
       "LONGITUDE                 0\n",
       "SURF_COND_DESC       132915\n",
       "RD_COND_DESC         128645\n",
       "RD_DIV_DESC          140060\n",
       "DOB_YEAR             149995\n",
       "AGE                  149995\n",
       "accident_date             0\n",
       "accident_datetime         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "924bbbd2",
   "metadata": {},
   "source": [
    "#### Drop Null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b7bf61a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data=final_data.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e8ff15d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VEH_YEAR             0\n",
       "VEH_MAKE             0\n",
       "SPEED_LIMIT          0\n",
       "YEAR                 0\n",
       "Quarter              0\n",
       "VEHICLE_ID           0\n",
       "REPORT_NO            0\n",
       "SEX_DESC             0\n",
       "DATE_OF_BIRTH        0\n",
       "INJ_SEVER_DESC       0\n",
       "PERSON_TYPE_DESC     0\n",
       "ACC_DATE             0\n",
       "ACC_TIME             0\n",
       "WEATHER_DESC         0\n",
       "COUNTY_DESC          0\n",
       "LATITUDE             0\n",
       "LONGITUDE            0\n",
       "SURF_COND_DESC       0\n",
       "RD_COND_DESC         0\n",
       "RD_DIV_DESC          0\n",
       "DOB_YEAR             0\n",
       "AGE                  0\n",
       "accident_date        0\n",
       "accident_datetime    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_data.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d53b0bb9",
   "metadata": {},
   "source": [
    "#### Removing records where speed limit is 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b592cd37",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data=final_data[final_data['SPEED_LIMIT']>0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "903501a3",
   "metadata": {},
   "source": [
    "#### Removing records where WEATHER_DESC is Not applicable, Unknown, Other, Null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "f9ff1206",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data=final_data[(final_data.WEATHER_DESC != 'Not Applicable') \\\n",
    "                                  & (final_data.WEATHER_DESC != 'Unknown') \\\n",
    "                                  & (final_data.WEATHER_DESC != 'Other') \\\n",
    "                                  & (final_data.WEATHER_DESC != 'null')]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9395ab6",
   "metadata": {},
   "source": [
    "#### Removing records where RD_COND_DESC is Not applicable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "888cfb54",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data=final_data[(final_data.RD_COND_DESC != 'Not Applicable')]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4221de40",
   "metadata": {},
   "source": [
    "#### Removing records where SURF_COND_DESC is Not applicable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1f6391bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data=final_data[(final_data.SURF_COND_DESC != 'Not Applicable')]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00f33eda",
   "metadata": {},
   "source": [
    "#### Checking AGE should be greater than "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "520292ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data=final_data[(final_data.AGE > 0)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6f3b25f",
   "metadata": {},
   "source": [
    "#### Correlation map of different columns specified "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "95c9e849",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data=final_data[['SPEED_LIMIT','AGE','YEAR']].corr(), annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b6c9639c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "fig1 = sns.catplot(data = final_data, x = 'Quarter', kind = 'count',color='steelblue')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "8b67eaa6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "months=final_data['accident_datetime'].dt.month_name().value_counts()\n",
    "\n",
    "ax = months.plot(kind='bar', figsize=(10,5),color='steelblue')\n",
    "ax.set(xlabel='Month', ylabel='Total crashes', title='Month wise accidents records')\n",
    "ax.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8216e48e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
